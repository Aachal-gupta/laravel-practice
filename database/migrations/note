<!-- // database crate by terminal cammand -->
php artisan make:migration create_tablename_table
php artisan migrate 
<!-- // start xamp and show database laravel and in that table student /tablename + migration table which form auto
//make column in side that file which is make after execution of cammand   -->


<!-- //******* CHECK STATUS OF TABLE IN DB********* -->
php artisan migrate:status

<!-- //******Rollback ****** -->
php artisan migrate:rollback
<!-- // this cmmand will be delete last table from db which i made at last time and if we want to back that tabke return for that  -->
<!-- //cmaand is-> -->
php artisan migrate

<!-- //*******delete particular table in db******* -->
php artisan migrate:rollback --batch=2
<!-- //you can watch batch no. in migration table batch no=2 will be delete table -->

<!-- //*****aALL TABLE WILL BE DELETE **** -->
php artisan migrate:reset   //all table will be deleted except migration table 
<!-- //we can do back mean all deleted table will appear by -> php artisan migrate -->

<!-- //*******  RESET  ******* -->
<!-- // after edit in file you have to write cmmand -->
php artisan migrate:reset // it will be delete all table and then make all table 
php artisan migrate


<!-- //******* Add to column with Migration ****** */ -->
<!-- 3 steps    in  the place of update_students_table we can take any name like update-stu  --> 
 1) php artisan make:migration update_students_table --table=students   //a file is made update_student_table
2) modify in file update_students_table
3)php artisan migrate 

<!--********************************************
     *every table name will be plural form      *
     * like students, users,projects            *
     *at the end 's'letter should be take place * 
     ********************************************-->

     <!-- //Rename column
             $table->renameColumn('cities','city'); //if our mysql version is greater than 10 sthan only it will work
            //  remove column
             $table->dropColumn('id');

             
              //rename table  make file php artisan make:migration table_migration
        Schema::rename('student','students');
        // delete table 
        // Schema::dropIfExists('users'); -->

        <!-- endation-2 -->

        <!-- migration primary and foreign key -->
        php artisan make:migration create_c-students_table
        Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->string('Name',40);
            $table->string('Email',50)->nullable()->unique();

        });

        <!-- foreign key with Cascade -->
         <!-- if we want to change data in db table that column which is primary and foreign key -->
          

*******************************************************************************************************************************************
SEEDERS    and  STEPS                                          |
****************************************************|
insert date by seeding in two method|
                                    |->seeder   means Real data insert in table
                                    |->factory  means Fake data insert in table
For that there is 5 method 
1> create database
2> create database migration -> mean create tables in database
3>Seeding    -> means insert data fake/real
4>create model
5>camaand ->   php artisna db:seed 

*4> first make model -> php artisan make :model student 
don't take 's' in students , it will create student.php file in model folder

*3> maake seeder file-> php artisan make:seeder StudentSeeder
it will create a studentseeder file in database/seeder folder
in seeder file add path of model file student like->use App/Models/student

*) in create migration file add $table->timestamps();
in /studentSeeder.php file  write data in key value parse_ini_file and in databseSeeder file call that mathod which is in declare
in studentSeeder.php file ->likethis call function 

$this->call([
    StudentSeeder::class      <!--write here class name in studentSeeder  file  -->
    ]);
   <!-- after that run this command  -->
    php artisna migrate:refresh 
     <!--this cammand will delete all table and make/execute all table but data will be deleted  -->
     php artisan  db:seed  


*****************************************************|
Fake data in database table                          |               
*****************************************************|
create factory file 
php artisan make:factory StudentFactory
for refresh-> php artisan migrate:refresh
add data command-> php artisan db:seed

//migration and seeding data both at single cmd
php artisan migrate:fresh --seed



*****************************************************|
            Create Model                             |
Query builder -->controller                          |               
*****************************************************|

*) perform CRUD operation on db


-------------
* Read data *   by get method 
-------------

-------------
PAGINATION        DB::table9(tablename')->paginate(5)
-------------

____________________________________________________________________
1] php artisan make:migration create_student_table

2]  php artisan make:seeder lecturerSeeder

3] php artisan make:controller lacaturerController --model=lacturer  // it will make both model as well as controller file

__*notes__________________________________________________________________
[
    1> in migration file always be plural form .at last file name will be s
    2> in seeder file ,model file and controller file name will  be 1st letter should be capital 
    3>for execution use this cmmand   php artisan migrate:refresh and  php artisan db:seed
    
    
]


_________________________________________________________________________________________________________________________________________________________________
  
Q1] why we use resources on laravel ?
--> Laravel provides resource controllers to simplify the handling of CRUD operations.
    When you create a resource controller, Laravel automatically assigns standard routes (like index, show, create, store, edit, update, and destroy)
    to the controller methods.this methods already defined in  controller file
    by this command  we create file php artisan make:controller ProductController --resource

Q2] what is Resource controller ?
    Controllers that follow RESTful patterns, primarily used for managing resources in a CRUD format. 
    They simplify routing by automatically linking common HTTP verbs to specific methods.
    in route -> Route::resource('any-name', ProductController::class);

Q3] what is invokable Controllers ?
-->  Controllers that contain a single __invoke method, allowing them to act as a single-action controller.
     Useful for tasks that only need one action, like a contact form or login. 
     php artisan make:controller ContactController --invokable

Q4] what is API Controllers ?
    API Controllers: Similar to resource controllers but designed for API routes.
    You can use the --api flag when creating them to exclude methods like create and edit, 
    which are not typically used in APIs.
    php artisan make:controller ProductController --api

**]  RESTful mean --> RESTful refers to web services or APIs that follow the principles of REST (Representational State Transfer), an architectural style for designing networked applications. In a RESTful system, resources are uniquely identified and interacted with through standard HTTP methods. The goal is to create stateless, scalable, and easy-to-understand APIs by following specific guidelines.

types of controller:-

1] Basic Controller : php artisan make:controller UserController
 <!-- in that file we can make many function in one controller files  -->
2] single Action Controller : php artisan make:controller UserController --invokable
<!-- in that file we can make only one method  -->
3] Resource Controller : php artisan make:controller UserController --resource
<!-- in that file we use for CRUD operation . in that file already made it method/function like index, create ,store , show ,destroy , update, edit -->
<!--  in this we do not need to make route for every function just make add controller file path and and write route for one time 
  Route::resource('myfile',MyController::class); and now put on terminal   php artisan route:list --name=myfile this will show how to call this function                          -->
________________________________________________________________________________________________________________________________________________________________

Q1] what is ORM ? 
    In Laravel, ORM stands for Object-Relational Mapping, and Laravel's ORM is called Eloquent.
    Eloquent ORM is a built-in, powerful feature that allows you to interact with your database in an intuitive, object-oriented way.
    It essentially maps your database tables to corresponding models in Laravel, making it easier to work with complex data relationships
    without writing extensive SQL queries.

* Key Features of Eloquent ORM in Laravel:
    Models: Each database table has a corresponding "Model" in Laravel, making it easy to query and manipulate data in that table.
    CRUD Operations: Eloquent provides methods for Create, Read, Update, and Delete operations, allowing you to interact with the database effortlessly.
    Relationships: It handles relationships between tables (e.g., one-to-many, many-to-many, etc.) with simple methods, so you can easily retrieve related data.
    Query Builder: Eloquent provides a fluent, chainable query builder that makes it easy to construct complex SQL queries using PHP methods.

   * For example, if you have a users table, you can create a User model in Laravel. With Eloquent, you can then fetch all users like this:
        $users = User::all();
        $user = User::find(1);
        Eloquent makes working with databases more straightforward and is highly integrated with Laravel's other features, making it a popular choice for many developers.
*******************************************************************************************

1] create model and controller resource file both  by this single command 
    <!-- php artisan make:model Ormuser --controller --resource -->


    <!-- CHANGE DATABASE TABLE NAME ONLY IN RESOURCES CONTROLLER -->
     1] first go on phpmyadmin database , then on table click option  Operation and change table name 
     2] go on model of the same table and put    protected $table = "new_table_name";
     3] php artisan serve
     *) dont use that table name in file , we use table name which is eriiten in model in plural form.  (s)


     ________________________________________________________________________________________________________________________________________________________________
                    LARAVEL ELOQUENT ONE TO ONE RELATIONSHIP
                    
        1] php artisan make:migration create_users_table  (CREATE TABLE  , IN MIGRATION FILE WE MAKE 2 TABLE WITH FOREIGN KEY)
        2] php artisan migrate
        3] php artisan make:controller ClientController --resource (make 2 controller )
        4] php artisan make:controller ContactController  
        5] php artisan make:model Contact  (make  2 model file )
        6] php artisan make:model Client
        7] php artisan make:seeder ContactSeeder        // make json file  and seeder file to insert data in db
            php artisan make:seeder ContactSeeder 
        8] php artisan db:seed --class=contactSeeder
        9] in index function og ClientController file we fetch data and show  blow this 
        <!-- $client = Client::where('gender','male')
                        ->withWhereHas('contact',function($query){ //we can use whereHas,withWhereHas
                            $query->where('city','New York');
                        })->get();
            return $client;  -->
        10] in Client.php model we have to make a function . in that we use hasOne method for relation to other table 
        <!-- public function contact(){
            return $this->hasOne(Contact::class,'clients_id');  // there is  client file attached with contact file with one to one relation 
        } // clients_id is a foreign key of contact table in data base
  -->
        11]make the route    like this Route::resource('/client',ClientController::class);
        12] we can also make the inverse one to one relationship  by using belongsTo method in model file 

       _______________________________________________________________________________________________________
                            LARAVEL ELOQUENT ONE TO MANY RELATIONSHIP

        1] 