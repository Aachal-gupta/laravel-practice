<!-- // database crate by terminal cammand -->
php artisan make:migration create_tablename_table
php artisan migrate 
<!-- // start xamp and show database laravel and in that table student /tablename + migration table which form auto
//make column in side that file which is make after execution of cammand   -->


<!-- //******* CHECK STATUS OF TABLE IN DB********* -->
php artisan migrate:status

<!-- //******Rollback ****** -->
php artisan migrate:rollback
<!-- // this cmmand will be delete last table from db which i made at last time and if we want to back that tabke return for that  -->
<!-- //cmaand is-> -->
php artisan migrate

<!-- //*******delete particular table in db******* -->
php artisan migrate:rollback --batch=2
<!-- //you can watch batch no. in migration table batch no=2 will be delete table -->

<!-- //*****aALL TABLE WILL BE DELETE **** -->
php artisan migrate:reset   //all table will be deleted except migration table 
<!-- //we can do back mean all deleted table will appear by -> php artisan migrate -->

<!-- //*******  RESET  ******* -->
<!-- // after edit in file you have to write cmmand -->
php artisan migrate:reset // it will be delete all table and then make all table 
php artisan migrate


<!-- //******* Add to column with Migration ****** */ -->
<!-- 3 steps    in  the place of update_students_table we can take any name like update-stu  --> 
 1) php artisan make:migration update_students_table --table=students   //a file is made update_student_table
2) modify in file update_students_table
3)php artisan migrate 

<!--********************************************
     *every table name will be plural form      *
     * like students, users,projects            *
     *at the end 's'letter should be take place * 
     ********************************************-->

     <!-- //Rename column
             $table->renameColumn('cities','city'); //if our mysql version is greater than 10 sthan only it will work
            //  remove column
             $table->dropColumn('id');

             
              //rename table  make file php artisan make:migration table_migration
        Schema::rename('student','students');
        // delete table 
        // Schema::dropIfExists('users'); -->

        <!-- endation-2 -->

        <!-- migration primary and foreign key -->
        php artisan make:migration create_c-students_table
        Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->string('Name',40);
            $table->string('Email',50)->nullable()->unique();

        });

        <!-- foreign key with Cascade -->
         <!-- if we want to change data in db table that column which is primary and foreign key -->
          

*******************************************************************************************************************************************
SEEDERS    and  STEPS                                          |
****************************************************|
insert date by seeding in two method|
                                    |->seeder   means Real data insert in table
                                    |->factory  means Fake data insert in table
For that there is 5 method 
1> create database
2> create database migration -> mean create tables in database
3>Seeding    -> means insert data fake/real
4>create model
5>camaand ->   php artisna db:seed 

*4> first make model -> php artisan make :model student 
don't take 's' in students , it will create student.php file in model folder

*3> maake seeder file-> php artisan make:seeder StudentSeeder
it will create a studentseeder file in database/seeder folder
in seeder file add path of model file student like->use App/Models/student

*) in create migration file add $table->timestamps();
in /studentSeeder.php file  write data in key value parse_ini_file and in databseSeeder file call that mathod which is in declare
in studentSeeder.php file ->likethis call function 

$this->call([
    StudentSeeder::class      <!--write here class name in studentSeeder  file  -->
    ]);
   <!-- after that run this command  -->
    php artisna migrate:refresh 
     <!--this cammand will delete all table and make/execute all table but data will be deleted  -->
     php artisan  db:seed  


*****************************************************|
Fake data in database table                          |               
*****************************************************|
create factory file 
php artisan make:factory StudentFactory
for refresh-> php artisan migrate:refresh
add data command-> php artisan db:seed

//migration and seeding data both at single cmd
php artisan migrate:fresh --seed



*****************************************************|
            Create Model                             |
Query builder -->controller                          |               
*****************************************************|

*) perform CRUD operation on db


-------------
* Read data *   by get method 
-------------

-------------
PAGINATION        DB::table9(tablename')->paginate(5)
-------------

____________________________________________________________________
1] php artisan make:migration create_student_table

2]  php artisan make:seeder lecturerSeeder

3] php artisan make:controller lacaturerController --model=lacturer  // it will make both model as well as controller file

__*notes__________________________________________________________________
[
    1> in migration file always be plural form .at last file name will be s
    2> in seeder file ,model file and controller file name will  be 1st letter should be capital 
    3>for execution use this cmmand   php artisan migrate:refresh and  php artisan db:seed
    
    
]


_________________________________________________________________________________________________________________________________________________________________
  
Q1] why we use resources on laravel ?
--> Laravel provides resource controllers to simplify the handling of CRUD operations.
    When you create a resource controller, Laravel automatically assigns standard routes (like index, show, create, store, edit, update, and destroy)
    to the controller methods.this methods already defined in  controller file
    by this command  we create file php artisan make:controller ProductController --resource

Q2] what is Resource controller ?
    Controllers that follow RESTful patterns, primarily used for managing resources in a CRUD format. 
    They simplify routing by automatically linking common HTTP verbs to specific methods.
    in route -> Route::resource('any-name', ProductController::class);

Q3] what is invokable Controllers ?
-->  Controllers that contain a single __invoke method, allowing them to act as a single-action controller.
     Useful for tasks that only need one action, like a contact form or login. 
     php artisan make:controller ContactController --invokable

Q4] what is API Controllers ?
    API Controllers: Similar to resource controllers but designed for API routes.
    You can use the --api flag when creating them to exclude methods like create and edit, 
    which are not typically used in APIs.
    php artisan make:controller ProductController --api

**]  RESTful mean --> RESTful refers to web services or APIs that follow the principles of REST (Representational State Transfer), an architectural style for designing networked applications. In a RESTful system, resources are uniquely identified and interacted with through standard HTTP methods. The goal is to create stateless, scalable, and easy-to-understand APIs by following specific guidelines.

types of controller:-

1] Basic Controller : php artisan make:controller UserController
 <!-- in that file we can make many function in one controller files  -->
2] single Action Controller : php artisan make:controller UserController --invokable
<!-- in that file we can make only one method  -->
3] Resource Controller : php artisan make:controller UserController --resource
<!-- in that file we use for CRUD operation . in that file already made it method/function like index, create ,store , show ,destroy , update, edit -->
<!--  in this we do not need to make route for every function just make add controller file path and and write route for one time 
  Route::resource('myfile',MyController::class); and now put on terminal   php artisan route:list --name=myfile this will show how to call this function                          -->
________________________________________________________________________________________________________________________________________________________________

Q1] what is ORM ? 
    In Laravel, ORM stands for Object-Relational Mapping, and Laravel's ORM is called Eloquent.
    Eloquent ORM is a built-in, powerful feature that allows you to interact with your database in an intuitive, object-oriented way.
    It essentially maps your database tables to corresponding models in Laravel, making it easier to work with complex data relationships
    without writing extensive SQL queries.

* Key Features of Eloquent ORM in Laravel:
    Models: Each database table has a corresponding "Model" in Laravel, making it easy to query and manipulate data in that table.
    CRUD Operations: Eloquent provides methods for Create, Read, Update, and Delete operations, allowing you to interact with the database effortlessly.
    Relationships: It handles relationships between tables (e.g., one-to-many, many-to-many, etc.) with simple methods, so you can easily retrieve related data.
    Query Builder: Eloquent provides a fluent, chainable query builder that makes it easy to construct complex SQL queries using PHP methods.

   * For example, if you have a users table, you can create a User model in Laravel. With Eloquent, you can then fetch all users like this:
        $users = User::all();
        $user = User::find(1);
        Eloquent makes working with databases more straightforward and is highly integrated with Laravel's other features, making it a popular choice for many developers.
*******************************************************************************************

1] create model and controller resource file both  by this single command 
    <!-- php artisan make:model Ormuser --controller --resource -->


    <!-- CHANGE DATABASE TABLE NAME ONLY IN RESOURCES CONTROLLER -->
     1] first go on phpmyadmin database , then on table click option  Operation and change table name 
     2] go on model of the same table and put    protected $table = "new_table_name";
     3] php artisan serve
     *) dont use that table name in file , we use table name which is eriiten in model in plural form.  (s)


     ________________________________________________________________________________________________________________________________________________________________
                    LARAVEL ELOQUENT ONE TO ONE RELATIONSHIP
                    
        1] php artisan make:migration create_users_table  (CREATE TABLE  , IN MIGRATION FILE WE MAKE 2 TABLE WITH FOREIGN KEY)
        2] php artisan migrate
        3] php artisan make:controller ClientController --resource (make 2 controller )
        4] php artisan make:controller ContactController  
        5] php artisan make:model Contact  (make  2 model file )
        6] php artisan make:model Client
        7] php artisan make:seeder ContactSeeder        // make json file  and seeder file to insert data in db
            php artisan make:seeder ContactSeeder 
        8] php artisan db:seed --class=contactSeeder
        9] in index function og ClientController file we fetch data and show  blow this 
        <!-- $client = Client::where('gender','male')
                        ->withWhereHas('contact',function($query){ //we can use whereHas,withWhereHas
                            $query->where('city','New York');
                        })->get();
            return $client;  -->
        10] in Client.php model we have to make a function . in that we use hasOne method for relation to other table 
        <!-- public function contact(){
            return $this->hasOne(Contact::class,'clients_id');  // there is  client file attached with contact file with one to one relation 
        } // clients_id is a foreign key of contact table in data base
  -->
        11]make the route    like this Route::resource('/client',ClientController::class);
        12] we can also make the inverse one to one relationship  by using belongsTo method in model file 

       _______________________________________________________________________________________________________
                            LARAVEL ELOQUENT ONE TO MANY RELATIONSHIP

       ***] i have changed database  -> for that first go on .env file and change db namespace
         then use this 2 command php artisan config:cache
            php artisan config:clear after that  make migration file  write command php artisan migrate

       ***] php artisan migrate:fresh
        This will drop all tables and re-run migrations for the new database.

        1] php artisan make:migration create_post_table  
        2] SAME AS ABOVE , JUST USE ONE TO MANY RELATION
        inverse one to many relation is same as above like one to one relation
        same as many to many relation 

    _____________________________________________________________________________________________________________
            One to One relation in (polymorphic)

        **)Suppose you have a Photo model that can be associated with either a User or a Product model.
             This is a one-to-one polymorphic relationship since a single photo can belong to either a user or a product, but not both. in that we have to write (imageable_id) _id is important

            ________________________________________________________________________________________________
                                                    OBSERVER
                                                    ### What is an Observer in Laravel?

An **Observer** in Laravel is a class that is used to listen to and handle events that occur during the lifecycle of a model. These events include actions like when a model is being created, updated, deleted, or retrieved.

Observers are part of the **Observer Design Pattern**, and they help keep your codebase clean by moving the logic for model-related events into a separate class.

---

### Why Use an Observer?

1. **Separation of Concerns**: Move model-related event logic out of the model itself, making your code cleaner and easier to maintain.
2. **Code Reusability**: Reuse the same Observer across multiple models if needed.
3. **Centralized Event Handling**: Manage all model events (create, update, delete, etc.) in one place.
4. **Common Use Cases**:
   - Logging model changes (e.g., logging when a record is created or deleted).
   - Sending notifications or emails when certain actions occur.
   - Automatically updating related models or attributes (e.g., updating a `last_updated_by` field).

---

### When to Use an Observer?

- **When your model events require additional processing**: For example, sending an email or updating related models when a user is created.
- **To handle repetitive tasks consistently**: Observers can standardize how model events are processed across your application.
- **To maintain clean and testable code**: Avoid cluttering your model or controller logic.



---

### Supported Model Events in Observers

Laravel Observers can listen to the following model events:
1. **retrieved**: After a model is retrieved from the database.
2. **creating**: Before a model is created.
3. **created**: After a model has been created.
4. **updating**: Before a model is updated.
5. **updated**: After a model has been updated.
6. **saving**: Before a model is saved (both creating and updating).
7. **saved**: After a model is saved (both creating and updating).
8. **deleting**: Before a model is deleted.
9. **deleted**: After a model has been deleted.
10. **restoring**: Before a model is restored from soft delete.
11. **restored**: After a model has been restored.

---

### Benefits of Observers

- **Cleaner Codebase**: Keeps business logic out of models and controllers.
- **Easier Maintenance**: All event-related logic is centralized in one place.
- **Consistency**: Ensures model events are handled uniformly across the application.

practical:--
1) php artisan make:observer PostObserver --model=Post // it will create observer folder and inside that a file is created 
create events and call in AppServiceObserver file 

_________________________________________________________________________________________________________________
                                    EVENTS
                                    ### What are Events in Laravel?

In Laravel, **Events** are a way to handle and respond to specific actions or occurrences in your application. They allow you to **decouple your code** by letting different parts of your application react to an action without being tightly coupled to the code that triggers it.

Events are part of the **Observer Design Pattern**, enabling you to listen for and handle specific events as they happen in your application, like a user login, a database update, or a file upload.

---

### Why Use Events in Laravel?

1. **Decoupled Logic**: Events help separate the logic for specific tasks into independent listeners, making your code cleaner and more modular.
2. **Reusable Code**: You can reuse the same listener for multiple events or reuse an event in multiple parts of your application.
3. **Easier to Maintain**: Changes to an event or listener don't directly impact other parts of your application.
4. **Common Use Cases**:
   - Sending notifications or emails after a user action.
   - Logging user activities like login or logout.
   - Performing background jobs or triggering real-time broadcasts.

---

### How Events Work in Laravel

An event consists of two main parts:
1. **The Event**: Represents the action or occurrence you want to track.
2. **The Listener**: Defines the tasks to be performed when the event occurs.

---

### When to Use Events?

- **When you need to perform multiple actions on a single occurrence** (e.g., after user registration, send a welcome email and log the activity).
- **When you want to decouple business logic** (e.g., separating notification logic from user registration logic).
- **When triggering background jobs** (e.g., processing uploaded files or sending emails).



### Laravel Event Flow Summary

1. **Event is Created**: Represents a significant action, like user registration.
2. **Event is Triggered**: Dispatch the event using `event(new EventName(...))`.
3. **Listener is Invoked**: The corresponding listener handles the event.

---

### Benefits of Events in Laravel

- **Clean Code**: Separates concerns by moving event-specific logic to listeners.
- **Scalable**: Easily add new listeners to handle new tasks for the same event.
- **Background Processing**: Use queues to process events asynchronously.
- **Real-Time Updates**: Combine events with broadcasting to notify users in real time.
______________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________
                            QUERY SCOPE
                                |
                        ________|________
                        |                |
                    local scope        Global scope

                    In Laravel, **query scopes** allow you to encapsulate reusable query logic within your Eloquent models. This feature is especially useful when you need to apply certain conditions repeatedly across different parts of your application. Laravel supports two types of query scopes:

1. **Global Scopes**  
2. **Local Scopes**

---

### **1. Local Scopes**
Local scopes define reusable query logic that you can use by calling a method on the query builder. These are methods you define in your Eloquent model.

#### **Defining a Local Scope**
A local scope is defined by prefixing a method name in your Eloquent model with `scope`.

```php
class User extends Model
{
    // A local scope to fetch only active users
    public function scopeActive($query)
    {
        return $query->where('status', 'active');
    }

    // Another example: Scope for users created this month
    public function scopeCreatedThisMonth($query)
    {
        return $query->whereMonth('created_at', now()->month);
    }
}
```

#### **Using a Local Scope**
Once defined, you can invoke the scope using the method name (without the `scope` prefix) on the query builder:

```php
// Fetch all active users
$activeUsers = User::active()->get();

// Fetch all users created this month
$usersThisMonth = User::createdThisMonth()->get();

// You can also chain scopes and additional query conditions
$activeAdmins = User::active()->where('role', 'admin')->get();
```

#### **Benefits of Local Scopes**
- Keeps query logic reusable and centralized in the model.
- Improves code readability and reduces repetition.

---

### **2. Global Scopes**
Global scopes are applied to all queries for a given Eloquent model. You define a global scope when you want certain conditions (e.g., soft deletes, tenant filtering) to be automatically applied.

#### **Defining a Global Scope**
To create a global scope, you typically define a class that implements the `Illuminate\Database\Eloquent\Scope` interface.

```php
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Scope;

class ActiveScope implements Scope
{
    public function apply(Builder $builder, Model $model)
    {
        $builder->where('status', 'active');
    }
}
```

Then, apply the scope in your model:

```php
class User extends Model
{
    protected static function booted()
    {
        static::addGlobalScope(new ActiveScope());
    }
}
```

#### **Using a Global Scope**
Once defined, the global scope is automatically applied to all queries for the model:

```php
// This will fetch only active users because the global scope is applied
$users = User::all();
```

#### **Removing a Global Scope**
If needed, you can bypass a global scope using the `withoutGlobalScope` method:

```php
// Ignore the ActiveScope while querying
$allUsers = User::withoutGlobalScope(ActiveScope::class)->get();
```

---

### **Dynamic Scopes (Inline Query Logic with Closures)**
Laravel also allows you to define dynamic, on-the-fly scopes using closures. These are typically useful for temporary or unique filters.

```php
$activeUsers = User::where(function ($query) {
    $query->where('status', 'active');
})->get();
```

---

### **When to Use Query Scopes**
- **Local Scopes**: Use when you have query logic that will be reused in specific parts of your application.
- **Global Scopes**: Use when you want certain conditions to apply automatically to all queries for a model (e.g., multi-tenancy or soft delete conditions).
___________________________________________________________________________________________________________________________
            Image/Other file upload

1] store('images')   ->data will be store in Storage/App/images.jpg
we can not show/read this image  for user, it is local file saved and secure , it will be change the file name by default in 16 character

2] store('images','public')  ->data will be store in Storage/App/public/images.jpg
we can show/read this image  for user
in this function we are not passing image/file name . by default file name will be covert in to random name or hash name for security purpose from hackers. this name will be 16 character

3] storeAs('images','filename.jpg','public')  ->data will be store in Storage/App/public/images.jpg

4]move(base_path('\myfolder\images'),'filename.jpg'); image will be save in give you path and folder
we can also use
         Public_path()
         Storage_path()
         Resource_path()

------------------------------------------------------------------------------------------
1> first creae view file in view folder and make html css form page
2> now create resource controller file & write code 

